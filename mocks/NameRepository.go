// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	model "random-joke/model"

	mock "github.com/stretchr/testify/mock"
)

// NameRepository is an autogenerated mock type for the NameRepository type
type NameRepository struct {
	mock.Mock
}

// GetRandomName provides a mock function with given fields:
func (_m *NameRepository) GetRandomName() (*model.Name, error) {
	ret := _m.Called()

	var r0 *model.Name
	var r1 error
	if rf, ok := ret.Get(0).(func() (*model.Name, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *model.Name); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Name)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNameRepository creates a new instance of NameRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNameRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NameRepository {
	mock := &NameRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
