// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	model "random-joke/model"

	mock "github.com/stretchr/testify/mock"
)

// JokeRepository is an autogenerated mock type for the JokeRepository type
type JokeRepository struct {
	mock.Mock
}

// GetRandomJokeBaseOnName provides a mock function with given fields: name
func (_m *JokeRepository) GetRandomJokeBaseOnName(name *model.Name) (*model.RandomJoke, error) {
	ret := _m.Called(name)

	var r0 *model.RandomJoke
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Name) (*model.RandomJoke, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(*model.Name) *model.RandomJoke); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RandomJoke)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Name) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJokeRepository creates a new instance of JokeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJokeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *JokeRepository {
	mock := &JokeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
